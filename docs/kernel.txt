kernel stuff!

syscalls:

- called with "int 0x30"
- pointer to call name in esi
- arguments in eax, ebx, ecx, edx and edi
- return value in eax

default callset:

| name          | description                                   | returns                                  | arguments                                         |
|---------------|-----------------------------------------------|------------------------------------------|---------------------------------------------------|
| file_open     | opens a file                                  | opened file's id, 0 if failed            | path                                              |
| file_create   | creates a file                                | non-0 if successfully created            | path                                              |
| file_delete   | deletes a file                                | non-0 if successfully deleted            | path                                              |
| file_close    | closes a file(optionally saving if specified) | non-0 if successfully closed/saved       | file id, save                                     |
| file_read     | reads from a file                             | bytes read                               | file id, buffer, size                             |
| file_write    | writes to a file                              | bytes written(won't resize)              | file id, buffer, size                             |
| file_entry    | gives a file entry in a directory             | non-0 if successfuly read                | file id, buffer(for path), size(with null byte)   |
| file_seek     | moves the read/write head(absolute/relative)  | new head's position                      | file id, offset, type(0=start, 1=relative, 2=end) |
| file_resize   | resizes the file buffer                       | non-0 if successfully resized            | file id, size                                     |
| file_getmode  | gets a file's mode(hidden, directory, etc.)   | file's mode                              | file id                                           |
| file_setmode  | sets a file's mode                            | non-0 if successfully set                | file id, mode                                     |
| term_write    | writes to the terminal                        | bytes written                            | buffer, size                                      |
| term_read     | reads from the terminal                       | bytes read                               | buffer, size                                      |
| term_getmode  | gets the terminal's mode(echo, cook, etc.)    | terminal's mode                          |                                                   |
| term_setmode  | sets the terminal's mode                      | non-0 if successfully set                | mode                                              |
| term_getsize  | gets the terminal's resolution in characters  | low 16 bits=width, high 16 bits=height   |                                                   |
| prog_load     | runs a program(optionally with a callset)     | program's id, 0 if failed                | path, argv, envp, callset, call count(in callset) |
| prog_kill     | kills a program and unloads it                | non-0 if successfully killed             | program id                                        |
| prog_wait     | waits for a program to finish                 | return code, 0 if non-existent           | program id                                        |
| prog_skip     | let the scheduler skip to the next program    | always 1                                 |                                                   |
| prog_alloc    | extend the memory space                       | address after .bss, 0 if failed          | increment(in pages)                               |
| time_read*    | reads the current UTC time                    | 32-bit value in seconds since 01/01/2022 |                                                   |
| time_getzone* | gets the current timezone offset              | signed offset in hours from UTC          |                                                   |
| call_read     | reads from the caller program(custom callset) | bytes read                               | dest, src, size                                   |
| call_write    | writes to the caller program(custom callset)  | bytes written                            | dest, src, size                                   |

* -> not implemented

- a file can only be opened in one place at the same time
- when a program ends, it wont be unloaded until a prog_kill call is received, and the return code will be saved in case prog_wait is called afterwards(race condition prevention!)
- child programs do not end until they are either killed or its parent is unloaded, so a child program can keep running even if its parents returned
- file_entry will write a non-terminated string to buffer if the path doesn't fit, and in that case the function should be called again with a bigger buffer
- programs can create new callsets that will apply to its childs

(TODO: maybe file_eof syscall to make it faster???)

custom callsets:

- array of name-function pairs stored in the creator's memory space and that run on the creator's context
- passed alongsize its size onto a process when calling prog_load, or NULL and 0 if none
- the scheduler will be paused during the execution of any call, including custom ones(oh no, someone could crash the entire system! *panics*)

programs:

- running on ring 0 to maximize speed
- each program has a 64 KiB stack
- up to 256 running programs

scheduler:

- continuously increment current id until a non-free one is found(not the fastest but works)
- time slices are 1/256th of a second, about 4 milliseconds

memory space(program-wise):

- 0x00000000 - 0x000FFFFF -> kernel code space(1 MiB)
- 0x00100000 - 0x00EFFFFF -> kernel heap space(14 MiB)
- 0x00F00000 - 0x00FFFFFF -> user stack space(1 MiB)
- 0x01000000 - 0xFFFFFFFF -> user memory space
